// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file protos/api_error.proto (syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from enum ApiErrorCode
 */
export enum ApiErrorCode {
  /**
   * @generated from enum value: UNKNOWN = 0;
   */
  UNKNOWN = 0,

  /**
   * @generated from enum value: AUTH_INVALID_IDENTIFIER = 1;
   */
  AUTH_INVALID_IDENTIFIER = 1,

  /**
   * @generated from enum value: AUTH_INVALID_SECRET = 2;
   */
  AUTH_INVALID_SECRET = 2,

  /**
   * @generated from enum value: AUTH_INVALID_USER = 3;
   */
  AUTH_INVALID_USER = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(ApiErrorCode)
proto3.util.setEnumType(ApiErrorCode, "ApiErrorCode", [
  { no: 0, name: "UNKNOWN" },
  { no: 1, name: "AUTH_INVALID_IDENTIFIER" },
  { no: 2, name: "AUTH_INVALID_SECRET" },
  { no: 3, name: "AUTH_INVALID_USER" },
]);

/**
 * @generated from message ApiError
 */
export class ApiError extends Message<ApiError> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: string message = 2;
   */
  message = "";

  /**
   * @generated from field: ApiErrorCode code = 3;
   */
  code = ApiErrorCode.UNKNOWN;

  constructor(data?: PartialMessage<ApiError>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "ApiError";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "code", kind: "enum", T: proto3.getEnumType(ApiErrorCode) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ApiError {
    return new ApiError().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ApiError {
    return new ApiError().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ApiError {
    return new ApiError().fromJsonString(jsonString, options);
  }

  static equals(a: ApiError | PlainMessage<ApiError> | undefined, b: ApiError | PlainMessage<ApiError> | undefined): boolean {
    return proto3.util.equals(ApiError, a, b);
  }
}

